//Done: Scheduler aufnehmen: https://bukkit.gamepedia.com/Scheduler_Programming
//Done: Broadcast einbauen für Countdown
//TO-DO: Scheduler umbauen auf LocalDateTime
//TO-DO: Scheduler umbauen für CountDown

package de.dorsax.ShountDown;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

public class Scheduler extends BukkitRunnable {

    private final JavaPlugin plugin;
    private long l_hours, l_minutes;
    private boolean b_silent;
    private Shutdown sd;
    private LocalDateTime ldt_goaltime,ldt_last;

    public Scheduler(JavaPlugin plugin, LocalDateTime goaltime, Shutdown shutdown) {
    	// Done: calculate timespan in minutes and hours to use later
        this.plugin = plugin;
        this.sd = shutdown;
        this.ldt_goaltime=goaltime;
        this.ldt_last=LocalDateTime.now();
        this.l_hours=ChronoUnit.HOURS.between(ldt_last, ldt_goaltime);        
        this.l_minutes=ChronoUnit.MINUTES.between(ldt_last, ldt_goaltime);
        this.plugin.getServer().broadcastMessage("Scheduled shutdown for " + this.ldt_goaltime.getHour() + ":" + this.ldt_goaltime.getMinute());
    }
    
    public void setSilent(boolean b_silent) {
    	this.b_silent=b_silent;
    }

    @Override
    public void run() {
        // 0  : Let it run until Minutes is first time 0, when 
    	// 1st: Check if current Time is more than one span higher than last time, span is variable
    	// 2nd: if so, change var ldt_last to new, craft message to shout
    	// 3rd: broadcast message
    	String s_message="Shutdown erfolgt in ";
    	long l_minutesToSpan = 0;
    	LocalDateTime ldt_now = LocalDateTime.now();
    	long l_hours = ChronoUnit.HOURS.between(ldt_now, ldt_goaltime);
    	long l_minutes = ChronoUnit.MINUTES.between(ldt_now, ldt_goaltime);
    	
    	if (this.l_hours>0) { //while hours remaining 
    		if (this.l_hours != l_hours) {
    			this.l_hours=l_hours;
    			s_message+=""+this.l_hours+" Stunde";
    			if (this.l_hours>=2) s_message+="n";
    			s_message+=".";
    		} else {
    			return;
    		}
//    		if (LocalDateTime.now().isAfter(this.ldt_last.plusMinutes(this.l_minutes))) {
//    			this.l_minutes=0;
//    			this.l_hours--;
//    			ldt_last=LocalDateTime.now();
//    			s_message+=""+this.l_hours+" Stunde";
//    			if (this.l_hours>=2) s_message+="n";
//    			s_message+=".";
//    		} else {
//    			return;
//    		}
    	} else if (this.l_hours >=1) { //only hours
    		if (LocalDateTime.now().isAfter(this.ldt_last.plusHours(1))) {
    			this.l_hours--;
    			ldt_last=LocalDateTime.now();
    			s_message+=""+this.l_hours+" Stunde";
    			if (this.l_hours>=2) s_message+="n";
    			s_message+=".";
    			if (this.l_hours==0) this.l_minutes=60;
    		} else {
    			return;
    		}
    	} else if (this.l_minutes >15) { //between 1h and 15 minutes
    		l_minutesToSpan = this.l_minutes%15;
    		if (l_minutesToSpan==0) l_minutesToSpan=15;
    		if (LocalDateTime.now().isAfter(this.ldt_last.plusMinutes(l_minutesToSpan))) {
    			this.l_minutes-=l_minutesToSpan;
    			ldt_last=LocalDateTime.now();
    			s_message+=""+this.l_minutes+" Minuten.";
    		} else {
    			return;
    		}
    	} else if (this.l_minutes > 5) { //15, 10, 5 minutes
    		l_minutesToSpan = this.l_minutes-1;
    		if (LocalDateTime.now().isAfter(this.ldt_last.plusMinutes(l_minutesToSpan))) {
    			this.l_minutes-=l_minutesToSpan;
    			ldt_last=LocalDateTime.now();
    			s_message+=""+this.l_minutes+" Minuten.";
    		} else {
    			return;
    		}
    	} else if (this.l_minutes <=1) { //, 10, 5 minutes
    		l_minutesToSpan = this.l_minutes%9;
    		if (l_minutesToSpan==0) l_minutesToSpan=5;
    		if (LocalDateTime.now().isAfter(this.ldt_last.plusMinutes(l_minutesToSpan))) {
    			this.l_minutes-=l_minutesToSpan;
    			ldt_last=LocalDateTime.now();
    			s_message+=""+this.l_minutes+" Minuten.";
    		} else {
    			return;
    		}
    	}
    	
    	if (!b_silent) this.plugin.getServer().broadcastMessage("§4[Server]§r "+s_message);
    	Bukkit.getConsoleSender().sendMessage("§4[ShountDown] §r"+s_message);
    	
        if ( this.l_hours>0) { ////i_countdown > 0) {
        	if (!b_silent) this.plugin.getServer().broadcastMessage("Shutdown erfolgt in 1 Sekunden!");
            //this.i_countdown--;
        } else {
        	if (!b_silent) this.plugin.getServer().broadcastMessage("Shutdown erfolgt!");
        	this.sd.run();
        	this.cancel();
        }
    }

}